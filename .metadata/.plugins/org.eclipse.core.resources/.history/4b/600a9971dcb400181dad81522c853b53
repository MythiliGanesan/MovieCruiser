package com.stackroute.movie.controller;

import java.util.List;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.stackroute.movie.domain.Movie;
import com.stackroute.movie.exception.MovieAlreadyExistsException;
import com.stackroute.movie.exception.MovieNotFoundException;
import com.stackroute.movie.services.MovieService;

import io.jsonwebtoken.Jwts;
@CrossOrigin(origins="http://localhost:4200")
@RestController
@RequestMapping(path="/api/v1/movieservice")
public class MovieController {
	
	@Autowired
	private MovieService movieService;
	
	private String getCurrentUserId(final ServletRequest req) {
		final HttpServletRequest request = (HttpServletRequest) req;
		final String authHeader = request.getHeader("authorization");
		final String token = authHeader.substring(7);
		String userId = Jwts.parser().setSigningKey("secretkey").parseClaimsJws(token).getBody().getSubject();
		return userId;
	}
	
	@PostMapping("/movie")
	public ResponseEntity<?> saveNewMovie(@RequestBody Movie movie,HttpServletRequest req,HttpServletRequest response){
		System.out.println("saving movie");
		String userId = getCurrentUserId(req);
		System.out.println("userId::"+userId);
		try {
			movie.setUserId(userId);
		 movieService.saveMovie(movie);
		 } catch (MovieAlreadyExistsException e) {
			return new ResponseEntity<String> (e.getMessage(),HttpStatus.CONFLICT);
		}
		return new ResponseEntity<Movie> (movie,HttpStatus.CREATED);
	}
	
	@PutMapping(path="/movie/{id}")
	public ResponseEntity<?> updateMovie(@PathVariable ("id") Integer id, @RequestBody Movie movie, HttpServletRequest req){
	Movie fetchedMovie;
		try {
			String userID = getCurrentUserId(req);
			int id = movieService.getIdwithUserIdAndMovieId(userId, movieId);
	        fetchedMovie=movieService.updateMovie(id,movie);
		} catch (MovieNotFoundException e) {
			return new ResponseEntity<String> (e.getMessage(),HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<Movie> (movie,HttpStatus.OK);
	}
	
	@DeleteMapping(value="/movie/{id}")
	public ResponseEntity<?> deleteMovieById(@PathVariable("id") int movieId, HttpServletRequest req){
		try {
			String userId = getCurrentUserId(req);
			int id = movieService.getIdwithUserIdAndMovieId(userId, movieId);
			movieService.deleteMovieById(id);		
			} catch (MovieNotFoundException e) {
			return new ResponseEntity<String> (e.getMessage(),HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity <String> ("movie deleted successfully",HttpStatus.OK);
	}
	
	@DeleteMapping(value = "/movie/{id}")
	public ResponseEntity<?> deleteMovieById(@PathVariable("id") int movieId, HttpServletRequest request) {
		try {
			String userId = getMovieByUserId(request);
			int id = movieService.getIdwithUserIdAndMovieId(userId, movieId);
			movieService.deleteMovieById(id);
		} catch (MovieNotFoundException e) {
			return new ResponseEntity<String>(e.getMessage(), HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity<String>("movie deleted successfully", HttpStatus.OK);
	}

	
	@GetMapping(path="/movie/{id}")
	public ResponseEntity<?> fetchMovieById(final ServletRequest req,@PathVariable("id") int id, HttpServletRequest req){
		Movie thisMovie;
		try {
			String userId = getCurrentUserId(req);
			int id = movieService.getIdwithUserIdAndMovieId(userId, movieId);
			thisMovie = movieService.getMovieById(id);
		    thisMovie=movieService.getMovieByUserId(userId, id);
		} catch (MovieNotFoundException e) {
			return new ResponseEntity<String> (e.getMessage(),HttpStatus.NOT_FOUND);
		}
		return new ResponseEntity <Movie> (thisMovie,HttpStatus.OK);
	}

     @GetMapping("/movies")
 	public @ResponseBody ResponseEntity<List<Movie>> fetchMyMovies(final ServletRequest req,
 			final ServletResponse res) {

 		String userId = getCurrentUserId(req);
 		System.out.println("userId::"+userId);
 		return new ResponseEntity<List<Movie>>(movieService.getMyMovies(userId), HttpStatus.OK);
 	}
}
